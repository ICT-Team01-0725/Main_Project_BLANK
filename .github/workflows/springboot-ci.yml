### CI 작업
### springboot-ci.yml : 빌드 및 테스트

## CI / CD 작업 이해를 위한 자료 공유 URL
## https://www.redhat.com/ko/topics/devops/what-is-ci-cd

## Gradle Wrapper 사용 필수
## 아래의 코드는 Gradle Wrapper(gradlew)가 프로젝트에 포함되어 있다고 가정

## Gradle을 통한 의존성 그래프 확인 이점
## 라이브러리 업데이트 상태 확인 & 보안 취안점 파악 & 전체 구조 시각화

## yml 파일에서 들여쓰기는 부모-자식 관계 계층 구조를 정의 (들여쓰기로 리스트별 항목 구분)

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]    # main 브랜치에 푸시될 때 실행
  pull_request:
    branches: [ "main" ]    # main 브랜치로의 PR 시 실행

jobs:
  build:
    # 최신 Ubuntu에서 실행
    runs-on: ubuntu-latest  
    permissions:
      contents: read

    steps:
    # 1. 코드 체크아웃
    - uses: actions/checkout@v4
    
    # 2. JDK 17 설정 (로컬 환경변수 통일 버전)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. Gradle 캐시 설정 (빌드 속도 최적화) : Gradle 종속성 캐싱
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        # Gradle의 캐시 위치
        path: ~/.gradle/caches  
        # 캐시 구분
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        # 동일한 운영 체제 캐시 우선 복구
        restore-keys: |
          gradle-${{ runner.os }}

    # 4. Docker로 MySQL 설정
    ## MySQL이 완전히 실행될 때까지 대기
    ## application.properties, application.yml 파일에서 DB 연결이 설정되어 있어야 함  
    - name: Set up MySQL container
      run: |
        docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -d -p 3306:3306 mysql:8.0
        until docker exec mysql mysqladmin --user=root --password=root --host=localhost --silent ping; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done

    # 5. Gradle 빌드 및 테스트 실행
    - name: Build and test with Gradle
      # 명령어 빌드
      # Gradel 테스트 실행을 예외 처리하려면 clean build 이후에 --exclude-task test 를 추가 (팀원 사용 금지)
      run: |
        ./gradlew clean build
      env:
        CI: true  # Gradle 빌드 시 CI 환경을 명시

  # Gradle 종속성 그래프 (Dependency Graph)를 생성하고 제출하기 위한 job
  ## GitHub의 Dependabot Alerts 기능 활성화
  ## 프로젝트 의존성 관리 효과적으로 관리
  
  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    # 1. 코드 체크아웃
    ## GitHub 리포지토리의 코드를 현재 작업 환경을 가져오기
    ## Gradle 빌드 및 종속성 그래프 생성에 필요한 소스 코드와 설정 파일 사용 가능
    - uses: actions/checkout@v4

    # 2. JDK 17 설정
    ## Gradle 빌드 및 종속성 그래프 생성
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. 종속성 그래프 생성 및 제출 (Dependabot Alerts 활성화)
    ## 팀 리포지터리 내의 Insights > Dependency graph 메뉴 탭 선택
    ## Gradle을 이용한 의존성 그래프를 생성하고 이를 GitHub에 제출
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

