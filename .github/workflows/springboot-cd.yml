### CD 작업
### springboot-cd.yml : 배포

### 현재 코드는 실작동 ci, cd 코드가 아닙니다
### 백엔드 개발 본격화, AWS 적용 이후에 실질적으로 적용할 예정이니 참고해주세요

## CI / CD 작업 이해를 위한 자료 공유 URL
## https://www.redhat.com/ko/topics/devops/what-is-ci-cd

## Gradle Wrapper 사용 필수
## 아래의 코드는 Gradle Wrapper(gradlew)가 프로젝트에 포함되어 있다고 가정

## yml 파일에서 들여쓰기는 부모-자식 관계 계층 구조를 정의 (들여쓰기로 리스트별 항목 구분)

name: Java CD with Gradle

on:
  # CI에서 성공적인 빌드 후 자동 배포 수행
  workflow_run:
    workflows: ["Java CI with Gradle"]  # CI 워크플로우의 이름
    types:
      - completed  # CI가 완료되었을 때 배포 워크플로우 실행

jobs:
  deploy:
    # 최신 Ubuntu에서 실행
    runs-on: ubuntu-latest  
    permissions:
      contents: read

    steps:
    # 1. 코드 체크아웃
    - uses: actions/checkout@v4
    
    # 2. JDK 17 설정 (로컬 환경변수 통일 버전)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. Gradle 캐시 설정 (빌드 속도 최적화) : Gradle 종속성 캐싱
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        # Gradle의 캐시 위치
        path: ~/.gradle/caches  
        # 캐시 구분
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        # 동일한 운영 체제 캐시 우선 복구
        restore-keys: |
          gradle-${{ runner.os }}

    # 4. Docker로 MySQL 설정
    ## MySQL이 완전히 실행될 때까지 대기
    ## application.properties, application.yml 파일에서 DB 연결이 설정되어 있어야 함  
    - name: Set up MySQL container
      run: |
        docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -d -p 3306:3306 mysql:8.0
        until docker exec mysql mysqladmin --user=root --password=root --host=localhost --silent ping; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done

    # 5. Gradle 빌드 및 배포 실행
    - name: Build and deploy with Gradle
      run: |
        ./gradlew clean build deploy
      env:
        CI: true  # Gradle 빌드 시 CI 환경을 명시

    # 6. 배포 환경에 배포 (AWS EC2)
    # AWS EC2에 SSH 연결 및 파일 전송 ~ EC2에 배포할 디렉토리로 이동
    # 최신 빌드된 .jar 파일을 해당 디렉토리에 복사 (GitHub의 워크플로우에서 아티팩트를 복사하는 방법)
    # 새로운 .jar 파일로 애플리케이션 실행 ~ 서비스 재시작 
    - name: Deploy to AWS EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_SSH_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
          cd /path/to/your/application
          
          scp -i ${{ secrets.AWS_SSH_KEY }} target/your-application.jar ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/path/to/your/application/

          sudo systemctl stop your-application.service

          sudo java -jar /path/to/your/application/your-application.jar

          sudo systemctl start your-application.service
        EOF
      env:
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}  # EC2 퍼블릭 IP 주소
        AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}    # SSH 키 (GitHub Secrets에서 설정)
